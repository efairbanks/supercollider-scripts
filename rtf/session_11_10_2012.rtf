{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf470
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red0\green115\blue0;\red96\green96\blue96;
\red51\green51\blue191;\red0\green0\blue255;\red255\green102\blue0;\red191\green0\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs24 \cf0 \
\
(\
\
\cf2 Synth\cf0 (\cf3 \\kick\cf0 );\
\
\cf2 Synth\cf0 (\cf3 \\hats\cf0 );\
\
\cf2 Synth\cf0 (\cf3 \\snaredrum\cf0 );\
\
\cf2 Synth\cf0 (\cf3 \\snare\cf0 );\
\
\cf2 Synth\cf0 (\cf3 \\bass\cf0 );\
\
\cf2 Synth\cf0 (\cf3 \\pluck\cf0 );\
\
)\
\
(\
\
w = \cf2 Window\cf0 .new(\cf4 "Derp"\cf0 , \cf2 Rect\cf0 (100,100,640,480), border:\cf5 true\cf0 );\
\
w.front;\
\
w.view.background_(\cf2 Color\cf0 .black);\
\'a0 \'a0 \'a0 \'a0 \
w.drawFunc = \{\
\pard\pardeftab720
\cf0 \
	\cf6 var\cf0  beat, beat1, beat2, beat4, beat8, beat16, beat32, width, height;\
\
	width = w.bounds.width;\
	height = w.bounds.height;\
	\
	beat = \cf7 ~globalBeat\cf0 ;\
	\
	\cf2 Pen\cf0 .fillColor = \cf2 Color\cf0 .green;\
	\
	beat1 = beat.wrap(0, 1);\
	\
	\cf2 Pen\cf0 .fillRect(\cf2 Rect\cf0 (0,125,width*beat1/1,25));\
	\
	beat2 = beat.wrap(0, 2);\
	\
	\cf2 Pen\cf0 .fillRect(\cf2 Rect\cf0 (0,100,width*beat2/2,25));\
	\
	beat4 = beat.wrap(0, 4);\
	\
	\cf2 Pen\cf0 .fillRect(\cf2 Rect\cf0 (0,75,width*beat4/4,25));\
	\
	beat8 = beat.wrap(0, 8);\
	\
	\cf2 Pen\cf0 .fillRect(\cf2 Rect\cf0 (0,50,width*beat8/8,25));\
	\
	beat16 = beat.wrap(0, 16);\
	\
	\cf2 Pen\cf0 .fillRect(\cf2 Rect\cf0 (0,25,width*beat16/16,25));\
	\
	beat32 = beat.wrap(0, 32);\
	\
	\cf2 Pen\cf0 .fillRect(\cf2 Rect\cf0 (0,0,width*beat32/32,25));\
	\
\};\
\
\cf2 AppClock\cf0 .sched(0.0,\{w.refresh;1/30;\});\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 w.view.keyDownAction = \{\
		\
	\cf6 |v,c,m,u,k|\cf0 \
	\
	\cf7 ~curDegree\cf0  = c.switch(\
	\
		$z, -8,\
		$x, -7,\
		$c, -6,\
		$v, -5,\
		$a, -4,\
		$s, -3,\
		$d, -2,\
		$f, -1,\
		$q, 0,\
		$w, 1,\
		$e, 2,\
		$r, 3,\
		$1, 4,\
		$2, 5,\
		$3, 6,\
		$4, 7,\
		0\
	\
	);\
	\
	\cf8 //~curDegree.postln;\cf0 \
	\
\};\
\
)\
\
(\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf7 ~curScale\cf0  = \cf2 Scale\cf0 .minor;\
\
\cf7 ~curDegree\cf0  = 0;\
\
\cf7 ~players\cf0  = [];\
\
\cf7 ~players\cf0  = \cf7 ~players\cf0 .add(\{\
\
	\cf6 |beat|\cf0 \
	\
	\
	\
\});\
\
\cf7 ~playFunc\cf0  = \{\
\
	\cf6 |beat|\cf0 \
	\
	\cf6 var\cf0  intbeat;\
	\
	\cf7 ~globalBeat\cf0  = beat;\
	\
	intbeat = (beat*6).asInteger;\
	\
	\cf8 //intbeat.postln;\cf0 \
	\
	if(intbeat%6==0,\{\
	\
		\cf2 Synth\cf0 (\cf3 \\kick\cf0 );\
		\
		if(\cf7 ~bass\cf0 !=\cf5 nil\cf0 &&intbeat%(4*6)==0,\{\
		\
			\cf7 ~bass\cf0 .set(\cf3 \\freq\cf0 , \cf7 ~curScale\cf0 .degreeToFreq(\cf7 ~curDegree\cf0 , 880, 0));\
			\
		\},\{\
		\
			\cf7 ~bass\cf0 .set(\cf3 \\freq\cf0 , \cf7 ~curScale\cf0 .degreeToFreq(\cf7 ~curDegree\cf0 , 440, 0));\
			\
		\});\
		\
	\});\
	\
	if(intbeat%12==6,\{\
	\
		\cf2 Synth\cf0 (\cf3 \\snaredrum\cf0 , [\cf3 \\amp\cf0 , -3.dbamp]);\
		\
		\cf2 Synth\cf0 (\cf3 \\snare\cf0 , [\cf3 \\amp\cf0 , -3.dbamp]);\
		\
	\});\
	\
	if(intbeat%6==3,\{\
	\
		\cf2 Synth\cf0 (\cf3 \\hats\cf0 );\
		\
	\});\
	\
	if(intbeat%3==0,\{\
	\
		\cf2 Synth\cf0 (\cf3 \\pluck\cf0 , [\cf3 \\freq\cf0 , \cf7 ~curScale\cf0 .degreeToFreq(\cf7 ~curDegree\cf0 , 440, 0)]);\
		\
	\});\
	\
	if(intbeat%3==2,\{\
	\
		\cf2 Synth\cf0 (\cf3 \\pluck\cf0 , [\cf3 \\freq\cf0 , \cf7 ~curScale\cf0 .degreeToFreq(\cf7 ~curDegree\cf0 , 440, 0)]);\
		\
	\});\
	\
	if(intbeat%(32*6)==0,\{\
		\
		\cf2 Synth\cf0 (\cf3 \\noisesweep\cf0 , [\cf3 \\dur\cf0 , t.beatDur*32]);\
		\
		\cf8 //"sdaf".postln;\cf0 \
		\
	\});\
	\
	1/6;\
	\
\}\
\
)\
\
(\
\
t = \cf2 TempoClock\cf0 (130/60).sched(0,\{\
\
	\cf6 |beat|\cf0 \
	\
	\cf7 ~playFunc\cf0 .(beat);\
	\
\});\
\
)\
\
(\
\
t.stop;\
\
)\
\
(\
\
\{\
\
\cf6 var\cf0  perc, melody;\
\
perc = 16;\
melody = 17;\
\
\cf7 ~perc\cf0  = 16;\
\cf7 ~melody\cf0  = 17;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf2 SynthDef\cf0 (\cf3 \\mixer\cf0 ,\{\
\
	\cf6 var\cf0  out, drums, leads, leadsSideChainMod;\
	\
	drums = \cf2 In\cf0 .ar(perc, 1);\
	\
	leads = \cf2 In\cf0 .ar(melody, 1);\
	\
	leadsSideChainMod = \cf2 LPF\cf0 .ar(\cf2 HPF\cf0 .ar(drums, 40), 200);\
	\
	leads = \cf2 FreeVerb\cf0 .ar(leads);\
	\
	leads = \cf2 Compander\cf0 .ar(leads, leadsSideChainMod, -30.dbamp, 1, 1/16, 5/1000, 40/1000);\
	\
	out = drums+leads;\
	\
	out = \cf2 Limiter\cf0 .ar(out, 1, 5/1000);\
	\
	\cf2 Out\cf0 .ar(0, out!2);\
	\
\}).store;\
\
if(\cf7 ~mixer\cf0 !=\cf5 nil\cf0 , \{\cf7 ~mixer\cf0 .free; \cf7 ~mixer\cf0  = \cf5 nil\cf0 ;\});\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf7 ~mixer\cf0  = \cf2 Synth\cf0 (\cf3 \\mixer\cf0 );\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf2 SynthDef\cf0 (\cf3 \\snare\cf0 , \{\
	\
	\cf6 |amp = 1, dur = 0.1|\cf0 \
	\
	\cf6 var\cf0  env, noise, output;\
	\
	noise = \cf2 Dust2\cf0 .ar(4000);\
	\
	env = \cf2 Line\cf0 .ar(1.0, 0, 0.15, doneAction:2);\
	\
	output = \cf2 LPF\cf0 .ar(\cf2 RHPF\cf0 .ar( noise * env, 1000, 0.4), 9000)*amp;\
	\
	output = output*(-12.dbamp);\
	\
	\cf2 Out\cf0 .ar(perc, output);\
	\
\}).store;\
\
\cf2 SynthDef\cf0 (\cf3 \\hats\cf0 , \{\
\
	\cf6 |amp=1,out=0,dur=0.1|\cf0 \
	\
	\cf6 var\cf0  env1, output;\
	\
	env1 = \cf2 EnvGen\cf0 .ar( \cf2 Env\cf0 .new([0,1,0],[0.0005,dur]), doneAction:2 );\
	\
	output = \cf2 WhiteNoise\cf0 .ar()*env1*env1*env1*env1*amp;\
	\
	output = \cf2 FreeVerb\cf0 .ar( output, 1/3, 0.8, 0.05 );\
	\
	output = \cf2 HPF\cf0 .ar( output, 5000 );\
	\
	output = output*(-24.dbamp);\
	\
	\cf2 Out\cf0 .ar(perc, output);\
	\
\}).store;\
\
f = \{\
	\
	\cf6 |ratio = 2, elements = 10|\cf0 \
\
	\cf6 var\cf0  x = [1];\
	\
	elements.do(\{x = x ++ (x[x.size-1]*ratio)\});\
	\
	x;\
	\
\};\
\
\cf2 SynthDef\cf0 (\cf3 \\kick\cf0 , \{\
			\
	\cf6 |dur=0.25,amp=1,basefreq=120|\cf0 \
	\
	\cf6 var\cf0  output;\
	\
	\cf6 var\cf0  freqs = f.value(1.1,20)*basefreq;\
	\
	\cf6 var\cf0  amps = f.value(0.225,20)*0.5;\
		\
	\cf6 var\cf0  phases = \cf2 NamedControl\cf0 .kr(\cf3 \\phases\cf0 ,#[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);\
	\
	\cf6 var\cf0  modfreqs = freqs * \cf2 EnvGen\cf0 .ar(\cf2 Env\cf0 ([1,0],[dur]));\
	\
	\cf6 var\cf0  tone = \cf2 SinOsc\cf0 .ar(modfreqs,phases,amps)*\cf2 EnvGen\cf0 .ar(\cf2 Env\cf0 ([0,1,0],[0.005,dur]),doneAction:2);\
	\
	tone = tone + \cf2 LPF\cf0 .ar((\cf2 PinkNoise\cf0 .ar()*\cf2 EnvGen\cf0 .ar(\cf2 Env\cf0 ([1,0],[0.01])))*0.02,2250);\
	\
	tone = \cf2 HPF\cf0 .ar(tone,40)*amp;\
	\
	output = tone*(-6.dbamp);\
	\
	\cf2 Out\cf0 .ar(perc, output);\
				\
\}).store;\
\
\cf2 SynthDef\cf0 (\cf3 \\snaredrum\cf0 ,\{\
\
	\cf6 |amp = 1|\cf0 \
\
	\cf6 var\cf0  noise = \cf2 WhiteNoise\cf0 .ar()*\cf2 EnvGen\cf0 .ar(\cf2 Env\cf0 ([0,20,5,2,2/3,0]/40,[5,30,70,30,100]/1000),doneAction:2);\
	\
	\cf6 var\cf0  output = \cf2 BPF\cf0 .ar(noise, [200,1000,2000,5000], 0.5, [10,20,15,5]/7)*amp;\
\
	output = output*(0.dbamp);\
\
	\cf2 Out\cf0 .ar(perc,output);\
	\
\}).store;\
\
\cf2 SynthDef\cf0 (\cf3 \\highhat\cf0 ,\{\
	\
	\cf6 |amp = 1|\cf0 \
\
	\cf6 var\cf0  noise = \cf2 WhiteNoise\cf0 .ar()*\cf2 EnvGen\cf0 .ar(\cf2 Env\cf0 ([0,20,5,2]/40,[5,40,70]/1000),doneAction:2);\
	\
	\cf6 var\cf0  output = \cf2 BPF\cf0 .ar(noise, [1000,2000,5000,7000,11000], 0.4, [3,5,15,10,15]/60)*amp;\
\
	output = output*(-12.dbamp);\
\
	\cf2 Out\cf0 .ar(perc,output);\
	\
\}).store;\
\
\cf2 SynthDef\cf0 (\cf3 \\bass\cf0 ,\{\
\
	\cf6 |freq=440|\cf0 \
	\
	\cf6 var\cf0  tone, out;\
	\
	tone = \cf2 SinOsc\cf0 .ar(freq/8) + \cf2 SinOsc\cf0 .ar(freq/16) + \cf2 SinOsc\cf0 .ar(freq/4) + \cf2 SinOsc\cf0 .ar(freq/2) + \cf2 SinOsc\cf0 .ar(freq) + \cf2 SinOsc\cf0 .ar(freq*2);\
	\
	tone = \cf2 LPF\cf0 .ar(tone, 110);\
	\
	tone = \cf2 HPF\cf0 .ar(tone, 55);\
	\
	tone = tone + \cf2 LPF\cf0 .ar(\cf2 HPF\cf0 .ar(\cf2 Saw\cf0 .ar(freq/8+\cf2 SinOsc\cf0 .ar(10,0,freq/500)), freq), freq*4);\
	\
	out = tone;\
	\
	out = out*(-23.dbamp);\
	\
	\cf2 Out\cf0 .ar(melody, out);\
	\
\}).store;\
\
\cf2 SynthDef\cf0 (\cf3 \\pluck\cf0 ,\{\
\
	\cf6 |freq=440|\cf0 \
	\
	\cf6 var\cf0  tone, env, out, pulsemod;\
	\
	pulsemod = \cf2 SinOsc\cf0 .ar(10,0,0.5) + 0.5;\
	\
	tone = \cf2 HPF\cf0 .ar(\cf2 Saw\cf0 .ar(freq*2,0.5),freq*4) + \cf2 Pulse\cf0 .ar(freq,pulsemod) + \cf2 SinOsc\cf0 .ar(freq*6,0,-10.dbamp);\
	\
	env = \cf2 EnvGen\cf0 .ar(\cf2 Env\cf0 ([0,1,0],[5/1000,50/1000]), doneAction: 2);\
	\
	out = tone*env;\
	\
	out = \cf2 RLPF\cf0 .ar(out, env*freq*8+(freq*2), 0.2);\
	\
	out = out*(-26.dbamp);\
	\
	\cf2 Out\cf0 .ar(\cf7 ~melody\cf0 , out);\
	\
\}).store;\
\
\cf2 SynthDef\cf0 (\cf3 \\noisesweep\cf0 ,\{\
	\
	\cf6 |dur|\cf0 \
	\
	\cf6 var\cf0  noise, env, out;\
	\
	env = \cf2 SinOsc\cf0 .ar(1/dur,pi/2,0.4)+0.6;\
	\
	env = env*env;\
	\
	noise = \cf2 WhiteNoise\cf0 .ar()*env*\cf2 EnvGen\cf0 .ar(\cf2 Env\cf0 ([(0.dbamp),(-20.dbamp)],[dur]),doneAction:2);\
	\
	noise = \cf2 Latch\cf0 .ar(noise, \cf2 Pulse\cf0 .ar(18000*env));\
	\
	noise = \cf2 LPF\cf0 .ar(noise, 17000*env);\
	\
	noise = noise*(-30.dbamp);\
	\
	out = \cf2 HPF\cf0 .ar(noise, 1000);\
	\
	\cf2 Out\cf0 .ar(\cf7 ~melody\cf0 , out);\
\
\}).store;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf8 /*\
SynthDef(\\morphlead,\{\
\
	|freq=440, dur=1|\
	\
	var tone, env, out;\
	\
	Out.ar(~melody, out);\
	\
\}).store;*/\cf0 \
\
if(\cf7 ~bass\cf0 !=\cf5 nil\cf0 , \{\cf7 ~bass\cf0 .free; \cf7 ~bass\cf0  = \cf5 nil\cf0 ;\});\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf7 ~bass\cf0  = \cf2 Synth\cf0 (\cf3 \\bass\cf0 );\
\
\}.()\
\
)}