{\rtf1\ansi\ansicpg1252\cocoartf1138
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red0\green115\blue0;\red96\green96\blue96;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs28 \cf0 ~lex = \{\
	\
	\cf2 |string|\cf0 \
\
	\cf2 var\cf0  getType = \{\
\
		\cf2 |element|\cf0 \
		\
		\cf2 var\cf0  type = \cf3 \\symbol\cf0 ;\
		\
		\cf2 var\cf0  haschars = \cf4 "[a-zA-Z]+"\cf0 .matchRegexp(element++" ");\
			\
		\cf2 var\cf0  hasdigits = \cf4 "[0-9]+"\cf0 .matchRegexp(element++" ");\
		\
		\cf2 var\cf0  isfloat = \cf4 "[\\.]+"\cf0 .matchRegexp(element++" ");\
		\
		if( hasdigits && isfloat.not, \{type = \cf3 \\integer\cf0 ;\});\
		\
		if( hasdigits && isfloat, \{type = \cf3 \\float\cf0 ;\});\
		\
		if( element == \cf4 "\\("\cf0 , \{type = \cf3 \\leftparen\cf0 ;\});\
		\
		if( element == \cf4 "\\)"\cf0 , \{type = \cf3 \\rightparen\cf0 ;\});\
		\
		type;\
	\
	\};\
\
	\cf2 var\cf0  tokens = [];\
\
	string.replace(\cf4 "\\("\cf0 ,\cf4 " \\( "\cf0 ).replace(\cf4 "\\)"\cf0 ,\cf4 " \\) "\cf0 ).split($ ).do(\{\
	\
		\cf2 |element, index|\cf0 \
		\
		if( (element != \cf4 ""\cf0 ) && (element != \cf4 " "\cf0 ) && (element != \cf2 nil\cf0 ) && (element != []), \{\
		\
			tokens = tokens.add(element);\
			\
		\});\
		\
	\});\
\
	tokens.collect(\{\
	\
		\cf2 |element|\cf0 \
		\
		\cf2 var\cf0  return = \cf2 nil\cf0 ;\
				\
		getType.(element).switch(\
		\
			\cf3 \\leftparen\cf0 ,	\{\cf4 "\\("\cf0 \},\
			\cf3 \\rightparen\cf0 ,	\{\cf4 "\\)"\cf0 \},\
			\cf3 \\symbol\cf0 ,		\{element.asSymbol\},\
			\cf3 \\integer\cf0 ,		\{element.asInteger\},\
			\cf3 \\float\cf0 ,		\{element.asFloat\}\
					\
		);\
		\
	\});\
\
\};\
\
~parse = \{\
	\
	\cf2 |symbols|\cf0 \
	\
	\cf2 var\cf0  processingexpression = \cf2 false\cf0 ;\
	\
	\cf2 var\cf0  symboltree = [];\
	\
	\cf2 var\cf0  expression = [];\
	\
	\cf2 var\cf0  pcount = 0;\
	\
	symbols.do(\{\
	\
		\cf2 |element, index|\cf0 \
		\
		if( (element == \cf4 "\\("\cf0 ) && (processingexpression == \cf2 false\cf0 ), \{processingexpression = \cf2 true\cf0 ; expression = [];\});\
		\
		if( element == \cf4 "\\("\cf0 , \{pcount = pcount + 1;\});\
		\
		if( element == \cf4 "\\)"\cf0 , \{pcount = pcount - 1;\});\
		\
		if(	processingexpression == \cf2 true\cf0 ,\
			\{\
				\
				expression = expression.add(element);\
				\
				if( (element == \cf4 "\\)"\cf0 ) && (pcount == 0),\{\
				\
					processingexpression = \cf2 false\cf0 ;\
					\
					symboltree = symboltree.add(~parse.(expression.copyRange(1,expression.size-2)));\
					\
				\});\
				\
			\},\
			\{\
			\
				symboltree = symboltree.add(element);\
				\
			\});\
		\
	\});\
	\
	symboltree;\
	\
\};\
\
~parse.(~lex.("test 1 2"));\
}