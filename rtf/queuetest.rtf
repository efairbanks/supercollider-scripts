{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf470
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red255\green102\blue0;\red0\green0\blue191;\red0\green0\blue255;
\red96\green96\blue96;\red0\green115\blue0;\red191\green0\blue0;\red51\green51\blue191;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs24 \cf0 \
(\
\
\cf2 ~measureLength\cf0  = 16;\
\
\cf2 ~globalBeat\cf0  = 0;\
\
\cf2 ~curDegree\cf0  = 0;\
\
\cf2 ~curScale\cf0  = \cf3 Scale\cf0 .minor;\
\
\cf2 ~figureLength\cf0  = 1;\
\
\cf2 ~queue\cf0  = [];\
\
\cf2 ~playFigure\cf0  = \{\
	\
	\cf4 |degree, length, type|\cf0 \
		\
	\cf5 ""\cf0 .postln;\
\
	type.switch(\
	\
		0,\{\
		\
			\cf3 Synth\cf0 (\cf6 \\wobble\cf0 , [\cf6 \\freq\cf0 , \cf2 ~curScale\cf0 .degreeToFreq(\cf2 ~curDegree\cf0 , 220, 0),\cf6 \\dur\cf0 , length]);\
			\
		\},\
		1,\{\
			\
			\cf3 Synth\cf0 (\cf6 \\vibrato\cf0 , [\cf6 \\freq\cf0 , \cf2 ~curScale\cf0 .degreeToFreq(\cf2 ~curDegree\cf0 , 880, 0),\cf6 \\dur\cf0 , length]);\
			\
			\cf3 Synth\cf0 (\cf6 \\vibrato\cf0 , [\cf6 \\freq\cf0 , \cf2 ~curScale\cf0 .degreeToFreq(\cf2 ~curDegree\cf0 +2, 880, 0),\cf6 \\dur\cf0 , length]);\
			\
			\cf3 Synth\cf0 (\cf6 \\vibrato\cf0 , [\cf6 \\freq\cf0 , \cf2 ~curScale\cf0 .degreeToFreq(\cf2 ~curDegree\cf0 +4, 880, 0),\cf6 \\dur\cf0 , length]);\
			\
		\},\
		2,\{\
			\
			\cf3 Synth\cf0 (\cf6 \\bend\cf0 , [\cf6 \\freq\cf0 , \cf2 ~curScale\cf0 .degreeToFreq(\cf2 ~curDegree\cf0 , 440, 0),\cf6 \\dur\cf0 , length]);\
			\
		\},\
		3,\{\
			\
			\cf3 Synth\cf0 (\cf6 \\pulse\cf0 , [\cf6 \\freq\cf0 , \cf2 ~curScale\cf0 .degreeToFreq(\cf2 ~curDegree\cf0 , 440, 0),\cf6 \\dur\cf0 , length]);\
			\
		\}\
\
	);\
\
\};\
\
\cf7 // --- //\cf0 \
\
if(t!=\cf8 nil\cf0 ,\{t.stop;t=\cf8 nil\cf0 ;\});\
\
t = \cf3 TempoClock\cf0 (130/60).sched(0,\{\
\
	\cf4 |beat|\cf0 \
	\
	\cf4 var\cf0  intbeat;\
	\
	\cf2 ~globalBeat\cf0  = beat;\
	\
	if(\cf2 ~queue\cf0 .size>0,\{\
		\
		if(\cf2 ~queue\cf0 [0].time<=\cf2 ~globalBeat\cf0 ,\{\
			\
			if(\cf2 ~queue\cf0 [0].played==\cf8 nil\cf0 ,\{\
			\
				postf(\cf5 "globalBeat: %, currentBeat: %, currentBeatDur: %"\cf0 , \cf2 ~globalBeat\cf0 , \cf2 ~queue\cf0 [0].time, \cf2 ~queue\cf0 [0].length);\
				\
				\cf5 ""\cf0 .postln;\
			\
				\cf2 ~playFigure\cf0 .(\cf2 ~curDegree\cf0 , t.beatDur*\cf2 ~queue\cf0 [0].length, \cf2 ~queue\cf0 [0].ftype);\
				\
				\cf2 ~queue\cf0 [0].played=\cf8 true\cf0 ;\
				\
				\cf2 ~queue\cf0 .removeAt(0);\
				\
			\});\
			\
		\});\
	\
	\});\
	\
	\cf7 //postf("Beat: %, Degree: %, iLen: %\\n", ~globalBeat, ~curDegree, ~figureLength);\cf0 \
	\
		\cf7 // --- temporary backing track begin --- //\cf0 \
	\
	intbeat = (beat*6).asInteger;\
	\
	if(intbeat%6==0,\{\
	\
		\cf3 Synth\cf0 (\cf6 \\kick\cf0 );\
		\
		if((\cf2 ~bass\cf0 !=\cf8 nil\cf0 )&&(intbeat%(4*6)==0),\{\
		\
			\cf2 ~bass\cf0 .set(\cf6 \\freq\cf0 , \cf2 ~curScale\cf0 .degreeToFreq(\cf2 ~curDegree\cf0 , 880, 0));\
			\
		\},\{\
		\
			\cf2 ~bass\cf0 .set(\cf6 \\freq\cf0 , \cf2 ~curScale\cf0 .degreeToFreq(\cf2 ~curDegree\cf0 , 440, 0));\
			\
		\});\
		\
	\});\
	\
	if(intbeat%12==6,\{\
	\
		\cf3 Synth\cf0 (\cf6 \\snaredrum\cf0 , [\cf6 \\amp\cf0 , -3.dbamp]);\
		\
		\cf3 Synth\cf0 (\cf6 \\snare\cf0 , [\cf6 \\amp\cf0 , -3.dbamp]);\
		\
	\});\
	\
	if(intbeat%6==3,\{\
	\
		\cf3 Synth\cf0 (\cf6 \\hats\cf0 );\
		\
	\});\
	\
	if(intbeat%(32*6)==0,\{\
		\
		\cf3 Synth\cf0 (\cf6 \\noisesweep\cf0 , [\cf6 \\dur\cf0 , t.beatDur*32]);\
		\
		\cf7 //"sdaf".postln;\cf0 \
		\
	\});\
	\
	\cf7 // --- end --- //\cf0 \
	\
	1/6;\
	\
\});\
\
\cf7 // --- //\cf0 \
\
w = \cf3 Window\cf0 .new(\cf5 "Derp"\cf0 , \cf3 Rect\cf0 (100,100,640,480), border:\cf8 true\cf0 );\
\
w.front;\
\
w.view.background_(\cf3 Color\cf0 .black);\
\
w.drawFunc = \{\
\pard\pardeftab720
\cf0 \
	\cf4 var\cf0  beat, width, height, xoff, yoff;\
\
	yoff = 0;\
	xoff = 0;\
\
	width = w.bounds.width;\
	height = w.bounds.height;\
	\
	beat = \cf2 ~globalBeat\cf0 ;\
\
	\cf3 Pen\cf0 .strokeColor = \cf3 Color\cf0 .green;\
\
	\cf3 Pen\cf0 .fillColor = \cf3 Color\cf0 .green;\
	\
	\cf3 Pen\cf0 .fillRect(\cf3 Rect\cf0 (xoff,yoff,width*(beat.wrap(0,\cf2 ~measureLength\cf0 ).round(\cf2 ~figureLength\cf0 /4))/\cf2 ~measureLength\cf0 ,25));\
	\
	yoff = yoff + 30;\
	\
	if(\cf2 ~queue\cf0 .size>0,\{\
		\
		xoff = xoff + (((\cf2 ~queue\cf0 [0].time - \cf2 ~globalBeat\cf0 )/\cf2 ~measureLength\cf0 )*width);\
		\
	\});\
	\
	\cf2 ~queue\cf0 .size.do(\{\
	\
		\cf4 |inc|\cf0 \
		\
		\cf4 var\cf0  blockwidth, blen, btime, globaltime, timeleft;\
		\
		blen = \cf2 ~queue\cf0 [inc].length;\
		\
		btime = \cf2 ~queue\cf0 [inc].time;\
		\
		globaltime = \cf2 ~globalBeat\cf0 ;\
		\
		timeleft = btime+blen-globaltime;\
		\
		\cf7 //if(inc==0,\{blen = timeleft\});\cf0 \
		\
		blockwidth = width*blen/\cf2 ~measureLength\cf0 ;\
		\
		\cf3 Pen\cf0 .strokeRect(\cf3 Rect\cf0 (xoff, yoff, blockwidth, 25));\
		\
		xoff = xoff + blockwidth;\
		\
	\});\
	\
	xoff = 0;\
	\
	yoff = yoff + 30;\
	\
\};\
\
\cf3 AppClock\cf0 .sched(0.0,\{w.refresh;1/30;\});\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 w.view.keyDownAction = \{\
		\
	\cf4 |v,c,m,u,k|\cf0 \
	\
	\cf4 var\cf0  deg, ilen, ftype;\
	\
	deg = c.switch(\
	\
		$z, -8,\
		$x, -7,\
		$c, -6,\
		$v, -5,\
		$a, -4,\
		$s, -3,\
		$d, -2,\
		$f, -1,\
		$q, 0,\
		$w, 1,\
		$e, 2,\
		$r, 3,\
		$1, 4,\
		$2, 5,\
		$3, 6,\
		$4, 7,\
		\cf8 nil\cf0 \
	\
	);\
	\
	if(deg!=\cf8 nil\cf0 ,\{\
	\
		\cf2 ~curDegree\cf0  = deg;\
		\
	\});\
	\
	ilen = c.switch(\
	\
		$m, 1,\
		$,, 2,\
		$., 4,\
		$/, 8,\
		\cf8 nil\cf0 \
	\
	);\
	\
	if(ilen!=\cf8 nil\cf0 ,\{\
	\
		\cf2 ~figureLength\cf0  = ilen;\
		\
	\});\
	\
	ftype = c.switch(\
	\
		$m, (ftype: 0, length: 1),\
		$,, (ftype: 1, length: 1),\
		$., (ftype: 2, length: 1),\
		$/, (ftype: 3, length: 1),\
		$j, (ftype: 0, length: 2),\
		$k, (ftype: 1, length: 2),\
		$l, (ftype: 2, length: 2),\
		$;, (ftype: 3, length: 2),\
		$u, (ftype: 0, length: 4),\
		$i, (ftype: 1, length: 4),\
		$o, (ftype: 2, length: 4),\
		$p, (ftype: 3, length: 4),\
		$7, (ftype: 0, length: 8),\
		$8, (ftype: 1, length: 8),\
		$9, (ftype: 2, length: 8),\
		$0, (ftype: 3, length: 8),\
		\cf8 nil\cf0 \
	\
	);\
	\
	if(ftype!=\cf8 nil\cf0 ,\{\
		\
		\cf7 //var time = ~globalBeat;\cf0 \
		\
		\cf4 var\cf0  time = (((\cf2 ~globalBeat\cf0 /ftype.length).asInteger)*ftype.length)+ftype.length;\
		\
		if(\cf2 ~queue\cf0 .size>0,\{\
		\
			time = \cf2 ~queue\cf0 .last.time + \cf2 ~queue\cf0 .last.length;\
			\
		\});\
	\
		\cf7 //~figureLength.postln;\cf0 \
		\
		ftype.time = time;\
		\
		\cf7 //ftype.postln;\cf0 \
	\
		\cf2 ~queue\cf0  = \cf2 ~queue\cf0 .add(ftype);\
		\
	\});\
	\
\};\
\
\cf7 // --- //\cf0 \
\
(\
\
\{\
\
\cf4 var\cf0  perc, melody;\
\
perc = 16;\
melody = 17;\
\
\cf2 ~perc\cf0  = 16;\
\cf2 ~melody\cf0  = 17;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf3 SynthDef\cf0 (\cf6 \\mixer\cf0 ,\{\
\
	\cf4 var\cf0  out, drums, leads, leadsSideChainMod;\
	\
	drums = \cf3 In\cf0 .ar(perc, 1);\
	\
	leads = \cf3 In\cf0 .ar(melody, 1);\
	\
	leadsSideChainMod = \cf3 LPF\cf0 .ar(\cf3 HPF\cf0 .ar(drums, 40), 200);\
	\
	leads = \cf3 FreeVerb\cf0 .ar(leads);\
	\
	leads = \cf3 Compander\cf0 .ar(leads, leadsSideChainMod, -30.dbamp, 1, 1/16, 5/1000, 40/1000);\
	\
	out = drums+leads;\
	\
	out = \cf3 Limiter\cf0 .ar(out, 1, 5/1000);\
	\
	\cf3 Out\cf0 .ar(0, out!2);\
	\
\}).store;\
\
if(\cf2 ~mixer\cf0 !=\cf8 nil\cf0 , \{\cf2 ~mixer\cf0 .free; \cf2 ~mixer\cf0  = \cf8 nil\cf0 ;\});\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf2 ~mixer\cf0  = \cf3 Synth\cf0 (\cf6 \\mixer\cf0 );\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf3 SynthDef\cf0 (\cf6 \\snare\cf0 , \{\
	\
	\cf4 |amp = 1, dur = 0.1|\cf0 \
	\
	\cf4 var\cf0  env, noise, output;\
	\
	noise = \cf3 Dust2\cf0 .ar(4000);\
	\
	env = \cf3 Line\cf0 .ar(1.0, 0, 0.15, doneAction:2);\
	\
	output = \cf3 LPF\cf0 .ar(\cf3 RHPF\cf0 .ar( noise * env, 1000, 0.4), 9000)*amp;\
	\
	output = output*(-12.dbamp);\
	\
	\cf3 Out\cf0 .ar(perc, output);\
	\
\}).store;\
\
\cf3 SynthDef\cf0 (\cf6 \\hats\cf0 , \{\
\
	\cf4 |amp=1,out=0,dur=0.1|\cf0 \
	\
	\cf4 var\cf0  env1, output;\
	\
	env1 = \cf3 EnvGen\cf0 .ar( \cf3 Env\cf0 .new([0,1,0],[0.0005,dur]), doneAction:2 );\
	\
	output = \cf3 WhiteNoise\cf0 .ar()*env1*env1*env1*env1*amp;\
	\
	output = \cf3 FreeVerb\cf0 .ar( output, 1/3, 0.8, 0.05 );\
	\
	output = \cf3 HPF\cf0 .ar( output, 5000 );\
	\
	output = output*(-24.dbamp);\
	\
	\cf3 Out\cf0 .ar(perc, output);\
	\
\}).store;\
\
f = \{\
	\
	\cf4 |ratio = 2, elements = 10|\cf0 \
\
	\cf4 var\cf0  x = [1];\
	\
	elements.do(\{x = x ++ (x[x.size-1]*ratio)\});\
	\
	x;\
	\
\};\
\
\cf3 SynthDef\cf0 (\cf6 \\kick\cf0 , \{\
			\
	\cf4 |dur=0.25,amp=1,basefreq=120|\cf0 \
	\
	\cf4 var\cf0  output;\
	\
	\cf4 var\cf0  freqs = f.value(1.1,20)*basefreq;\
	\
	\cf4 var\cf0  amps = f.value(0.225,20)*0.5;\
		\
	\cf4 var\cf0  phases = \cf3 NamedControl\cf0 .kr(\cf6 \\phases\cf0 ,#[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);\
	\
	\cf4 var\cf0  modfreqs = freqs * \cf3 EnvGen\cf0 .ar(\cf3 Env\cf0 ([1,0],[dur]));\
	\
	\cf4 var\cf0  tone = \cf3 SinOsc\cf0 .ar(modfreqs,phases,amps)*\cf3 EnvGen\cf0 .ar(\cf3 Env\cf0 ([0,1,0],[0.005,dur]),doneAction:2);\
	\
	tone = tone + \cf3 LPF\cf0 .ar((\cf3 PinkNoise\cf0 .ar()*\cf3 EnvGen\cf0 .ar(\cf3 Env\cf0 ([1,0],[0.01])))*0.02,2250);\
	\
	tone = \cf3 HPF\cf0 .ar(tone,40)*amp;\
	\
	output = tone*(-6.dbamp);\
	\
	\cf3 Out\cf0 .ar(perc, output);\
				\
\}).store;\
\
\cf3 SynthDef\cf0 (\cf6 \\snaredrum\cf0 ,\{\
\
	\cf4 |amp = 1|\cf0 \
\
	\cf4 var\cf0  noise = \cf3 WhiteNoise\cf0 .ar()*\cf3 EnvGen\cf0 .ar(\cf3 Env\cf0 ([0,20,5,2,2/3,0]/40,[5,30,70,30,100]/1000),doneAction:2);\
	\
	\cf4 var\cf0  output = \cf3 BPF\cf0 .ar(noise, [200,1000,2000,5000], 0.5, [10,20,15,5]/7)*amp;\
\
	output = output*(0.dbamp);\
\
	\cf3 Out\cf0 .ar(perc,output);\
	\
\}).store;\
\
\cf3 SynthDef\cf0 (\cf6 \\highhat\cf0 ,\{\
	\
	\cf4 |amp = 1|\cf0 \
\
	\cf4 var\cf0  noise = \cf3 WhiteNoise\cf0 .ar()*\cf3 EnvGen\cf0 .ar(\cf3 Env\cf0 ([0,20,5,2]/40,[5,40,70]/1000),doneAction:2);\
	\
	\cf4 var\cf0  output = \cf3 BPF\cf0 .ar(noise, [1000,2000,5000,7000,11000], 0.4, [3,5,15,10,15]/60)*amp;\
\
	output = output*(-12.dbamp);\
\
	\cf3 Out\cf0 .ar(perc,output);\
	\
\}).store;\
\
\cf3 SynthDef\cf0 (\cf6 \\bass\cf0 ,\{\
\
	\cf4 |freq=440|\cf0 \
	\
	\cf4 var\cf0  tone, out;\
	\
	tone = \cf3 SinOsc\cf0 .ar(freq/8) + \cf3 SinOsc\cf0 .ar(freq/16) + \cf3 SinOsc\cf0 .ar(freq/4) + \cf3 SinOsc\cf0 .ar(freq/2) + \cf3 SinOsc\cf0 .ar(freq) + \cf3 SinOsc\cf0 .ar(freq*2);\
	\
	tone = \cf3 LPF\cf0 .ar(tone, 110);\
	\
	tone = \cf3 HPF\cf0 .ar(tone, 55);\
	\
	tone = tone + \cf3 LPF\cf0 .ar(\cf3 HPF\cf0 .ar(\cf3 Saw\cf0 .ar(freq/8+\cf3 SinOsc\cf0 .ar(10,0,freq/500)), freq), freq*4);\
	\
	out = tone;\
	\
	out = out*(-23.dbamp);\
	\
	\cf3 Out\cf0 .ar(melody, out);\
	\
\}).store;\
\
\cf3 SynthDef\cf0 (\cf6 \\pluck\cf0 ,\{\
\
	\cf4 |freq=440|\cf0 \
	\
	\cf4 var\cf0  tone, env, out, pulsemod;\
	\
	pulsemod = \cf3 SinOsc\cf0 .ar(10,0,0.5) + 0.5;\
	\
	tone = \cf3 HPF\cf0 .ar(\cf3 Saw\cf0 .ar(freq*2,0.5),freq*4) + \cf3 Pulse\cf0 .ar(freq,pulsemod) + \cf3 SinOsc\cf0 .ar(freq*6,0,-10.dbamp);\
	\
	env = \cf3 EnvGen\cf0 .ar(\cf3 Env\cf0 ([0,1,0],[5/1000,50/1000]), doneAction: 2);\
	\
	out = tone*env;\
	\
	out = \cf3 RLPF\cf0 .ar(out, env*freq*8+(freq*2), 0.2);\
	\
	out = out*(-26.dbamp);\
	\
	\cf3 Out\cf0 .ar(\cf2 ~melody\cf0 , out);\
	\
\}).store;\
\
\cf3 SynthDef\cf0 (\cf6 \\noisesweep\cf0 ,\{\
	\
	\cf4 |dur|\cf0 \
	\
	\cf4 var\cf0  noise, env, out;\
	\
	env = \cf3 SinOsc\cf0 .ar(1/dur,pi/2,0.4)+0.6;\
	\
	env = env*env;\
	\
	noise = \cf3 WhiteNoise\cf0 .ar()*env*\cf3 EnvGen\cf0 .ar(\cf3 Env\cf0 ([(0.dbamp),(-20.dbamp)],[dur]),doneAction:2);\
	\
	noise = \cf3 Latch\cf0 .ar(noise, \cf3 Pulse\cf0 .ar(18000*env));\
	\
	noise = \cf3 LPF\cf0 .ar(noise, 17000*env);\
	\
	noise = noise*(-30.dbamp);\
	\
	out = \cf3 HPF\cf0 .ar(noise, 1000);\
	\
	\cf3 Out\cf0 .ar(\cf2 ~melody\cf0 , out);\
\
\}).store;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf7 /*\
SynthDef(\\morphlead,\{\
\
	|freq=440, dur=1|\
	\
	var tone, env, out;\
	\
	Out.ar(~melody, out);\
	\
\}).store;*/\cf0 \
\
\cf7 //if(~bass!=nil, \{~bass.free; ~bass = nil;\});\cf0 \
\
\cf7 //~bass = Synth(\\bass);\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf3 SynthDef\cf0 (\cf6 \\wobble\cf0 ,\{\
\
	\cf4 |freq=440, dur=0.1|\cf0 \
\
	\cf4 var\cf0  tone, env, out;\
	\
	tone = \cf3 Pulse\cf0 .ar(freq/4,0.4);\
	\
	env = \cf3 EnvGen\cf0 .ar(\cf3 Env\cf0 ([1,0,1,0,1,0,1,0],[dur/4,0,dur/4,0,dur/4,0,dur/4]), doneAction:2);\
	\
	env = \cf3 LPF\cf0 .ar(env*env,1000);\
	\
	out = \cf3 RLPF\cf0 .ar(tone, env*11000, 0.15)*(-20.dbamp);\
	\
	out = \cf3 HPF\cf0 .ar(out, 55);\
	\
	\cf3 Out\cf0 .ar(\cf2 ~melody\cf0 , out!2);\
	\
\}).store;\
\
\cf3 SynthDef\cf0 (\cf6 \\bend\cf0 ,\{\
\
	\cf4 |freq=440, dur=1|\cf0 \
\
	\cf4 var\cf0  tone, env, out, lfo, modfreq;\
	\
	env = \cf3 EnvGen\cf0 .ar(\cf3 Env\cf0 ([1,0,1,0,1,0,1,0],[dur/4,0,dur/4,0,dur/4,0,dur/4]), doneAction:2);\
	\
	env = env*env;\
	\
	modfreq = freq+(env*freq);\
	\
	tone = \cf3 Pulse\cf0 .ar(modfreq, env);\
	\
	out = tone*(-20.dbamp);\
	\
	\cf3 Out\cf0 .ar(\cf2 ~melody\cf0 , out!2);\
	\
\}).store;\
\
\cf3 SynthDef\cf0 (\cf6 \\pulse\cf0 ,\{\
\
	\cf4 |freq=440, dur=1|\cf0 \
\
	\cf4 var\cf0  tone, env, out, lfo, modfreq;\
	\
	env = \cf3 EnvGen\cf0 .ar(\cf3 Env\cf0 ([1,0,1,0,1,0],[dur/3,0,dur/3,0,dur/3]), doneAction:2);\
	\
	env = env*env;\
	\
	modfreq = freq+((((Pulse.ar(7)+1)/2)*2)*(((Pulse.ar(11)+1)/2)*2/3)*freq);\
	\
	tone = \cf3 Pulse\cf0 .ar(modfreq, env)*env;\
	\
	out = tone*(-15.dbamp);\
	\
	\cf3 Out\cf0 .ar(\cf2 ~melody\cf0 , out!2);\
	\
\}).store;\
\
\}.()\
\
)\
\pard\pardeftab720
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 )\
}