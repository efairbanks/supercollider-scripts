{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf470
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red255\green102\blue0;\red51\green51\blue191;
\red0\green0\blue191;\red96\green96\blue96;\red0\green0\blue255;\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs30 \cf0 \
\cf2 /* TODO:\
 * \
 * * Store knob/xypad values and continuous knob increments\
 * * Store relative values for knob/xypad values and update them during decayButtonStates()\
 * * Add button value for xypad press\
 * \
 */\cf0 \
 \
\cf2 // --- Dat class --- //\cf0 \
\
(\
\
\cf3 ~pks\cf0  = \cf4 nil\cf0 ; \cf2 // Keepin' it fresh!\cf0 \
\
\cf3 ~padKONTROL\cf0  = \{\
	\
	\cf2 // pks = PadKONTROL Singleton\cf0 \
	\
	|message|\
	\
	if(\cf3 ~pks\cf0 ==\cf4 nil\cf0 ,\{\
	\
		\cf5 MIDIClient\cf0 .init;\
	\
		\cf3 ~pks\cf0  = (\
		\
			sysexSend: \cf5 MIDIOut\cf0 .new(\cf5 MIDIClient\cf0 .destinations.indexOf(\cf5 MIDIOut\cf0 .findPort(\cf6 "padKONTROL"\cf0 , \cf6 "CTRL"\cf0 ))),\
			sysexRecv: \cf5 MIDIIn\cf0 .connect(0,\cf5 MIDIClient\cf0 .sources.indexOf(\cf5 MIDIIn\cf0 .findPort(\cf6 "padKONTROL"\cf0 , \cf6 "PORT A"\cf0 ))),\
		\
			binit: \{\
			\
				\cf7 |self|\cf0 \
				\
				\cf7 var\cf0  initString = [0xF0, 0x42, 0x40, 0x6E, 0x08, 0x00, 0x00, 0x01, 0xF7,0xF0, 0x42, 0x40, 0x6E, 0x08, 0x3F, 0x2A, 0x00, 0x00, 0x05, 0x05, 0x05, 0x7F, 0x7E, 0x7F, 0x7F, 0x03, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0d, 0x0E, 0x0F, 0x10, 0xF7,0xF0,0x42,0x40,0x6E,0x08,0x3F,0x0A,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x29,0x29,0x29,0xF7];\
				\
				self.sysexSend.sysex(\cf5 Int8Array\cf0 .newFrom(initString));\
				\
				self.sysexRecv.sysex = \{\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\pardirnatural
\cf0 			\
					\cf7 |src, sysex|\cf0 \
			\
					self.sysexRecvHandler(src, sysex);\
					\
				\};\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 		\
			\},\
			\
			sysexRecvHandler: \{\
			\
				\cf7 |self, src, sysex|\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\pardirnatural
\cf0 				\
				sysex[5].switch(\
				\
					0x45,\{	[\cf8 \\pad\cf0 ,(sysex[6]%64),(sysex[6]/64).round].postln;\
					\
						self.buttonStates[sysex[6]%64] = if((sysex[6]/64).round==0,\{\cf8 \\released\cf0 \},\{\cf8 \\pressed\cf0 \});\
						\
					\},\
						\
					0x49,\{	[\cf8 \\knob\cf0 ,sysex[6],sysex[7]].postln;\},\
					\
					0x43,\{	[\cf8 \\rotary\cf0 ,sysex[7]].postln;\},\
					\
					0x48,\{\
						[\cf8 \\button\cf0 ,sysex[6],sysex[7]/127].postln;\
						self.label2index.findKeyForValue(sysex[6]+16).postln;\
						\
						self.buttonStates[sysex[6]+16] = if((sysex[7]/127).round==0,\{\cf8 \\released\cf0 \},\{\cf8 \\pressed\cf0 \});\
						\
					\},\
					\
					0x4b,\{[\cf8 \\x\cf0 ,sysex[6],\cf8 \\y\cf0 ,sysex[7]].postln;\}\
				\
				);\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 	\
			\},\
	\
			label2index: (\
	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\pardirnatural
\cf0 				0: 0,\
				1: 1,\
				2: 2,\
				3: 3,\
				4: 4,\
				5: 5,\
				6: 6,\
				7: 7,\
				8: 8,\
				9: 9,\
				10: 10,\
				11: 11,\
				12: 12,\
				13: 13,\
				14: 14,\
				15: 15,\
				scene: 16,\
				message: 17,\
				setting: 18,\
				note: 19,\
				midich: 20,\
				swtype: 21,\
				relval: 22,\
				velocity: 23,\
				port: 24,\
				fixedvelocity: 25,\
				progchange: 26,\
				x: 27,\
				y: 28,\
				knob1: 29,\
				knob2: 30,\
				pedal: 31,\
				roll: 32,\
				flam: 33,\
				hold: 34\
			\
			),\
			\
			lightState: \{\
			\
				\cf7 |self, name, state|\cf0 \
				\
				self.lightStates[self.label2index[name]] = state;\
				\
			\},\
			\
			decayButtonStates: \{ \cf2 // call after one input "frame" (after checking button states)\cf0 \
			\
				|self|\
				\
				self.buttonStates.do(\{\
				\
					\cf7 |value, i|\cf0 \
				\
					if(value == \cf8 \\released\cf0 ,\{\
						self.buttonStates[i] = \cf4 nil\cf0 ;\
					\});\
					\
					if(value == \cf8 \\pressed\cf0 ,\{\
						self.buttonStates[i] = \cf8 \\held\cf0 ;\
					\});\
				\
				\});\
				\
			\},\
			\
			buttonState: \{\
			\
				\cf7 |self, nameOrPadIndex|\cf0 \
				\
				\cf7 var\cf0  state = self.buttonStates[self.label2index[nameOrPadIndex]];\
				\
				state;\
				\
			\},\
		\
			states2sysex: \{\
	\
				\cf7 |self, states, numberarray|\cf0 \
				\
				\cf7 var\cf0  hexarray, numvalues;\
				\
				numvalues = (states.size/7).asInteger;\
				\
				hexarray = 0!numvalues;\
				\
				numvalues.do(\{ \cf7 |valueiter|\cf0 \
					\
					7.do(\{ \cf7 |bititer|\cf0 \
					\
						hexarray[valueiter] = states[valueiter*7+bititer]*(1<<bititer) + hexarray[valueiter];\
					\
					\});\
					\
				\});\
				\
				hexarray++[0x00]++(numberarray.reverse);\
				\
			\},\
		\
			sendSysex: \{\
	\
				\cf7 |self, hexvals|\cf0 \
				\
				\cf7 var\cf0  sendString = [0xF0,0x42,0x40,0x6E,0x08,0x3F,0x0A,0x01]++hexvals++[0xF7];\
				\
				self.sysexSend.sysex(\cf5 Int8Array\cf0 .newFrom(sendString));\
				\
			\},\
		\
			lightStates: (1!16)++(0!19),\
			numberStates: [0x32,0x32,0x32],\
			buttonStates: (\cf4 nil\cf0 !35),\
			\
			setLights: \{\
			\
				\cf7 |self|\cf0 \
				\
				self.sendSysex(self.states2sysex(self.lightStates, self.numberStates));\
				\
			\}\
			\
		);\
		\
		\cf2 // --- end class --- //\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 		\
	\});\
	\
	\cf2 // --- //\cf0 \
	\
	\cf3 ~pks\cf0 ;\
	\
\};\
\
"padKONTROLclassInterface loaded!".postln;\
\
)\
\cf2 /*\
// --- Lets use it! --- //\
\
(\
\
// --- All systems engage --- //\
\
~padKONTROL.().binit();\
\
// --- One, two, three! --- //\
\
~padKONTROL.().numberStates = [0x31,0x32,0x33];\
\
// --- Checkerboard it! --- //\
\
16.do(\{\
\
	|inc|\
	\
	if(inc%2==1,\{\
		\
		~padKONTROL.().lightState(inc, if((inc/4).asInteger%2==0,\{0\},\{1\}));\
		\
	\},\{\
		\
		~padKONTROL.().lightState(inc, if((inc/4).asInteger%2==1,\{0\},\{1\}));\
			\
	\});\
	\
\});\
\
// --- Set it & forget it! --- //\
\
~padKONTROL.().lightState(\\setting, 1);\
\
// --- Send it over! --- //\
\
~padKONTROL.().setLights();\
\
)\
\
// --- Draw some pads! --- //\
\
(\
\
w = Window.new("Derp", Rect(100,100,640,480), border:true);\
\
w.front;\
\
w.view.background_(Color.black);\
\'a0 \'a0 \'a0 \'a0 \
w.drawFunc = \{\
\pard\pardeftab720
\cf2 \
	var xoff, yoff, width, height, height2;\
\
	width = w.bounds.width;\
	height = w.bounds.height*9/10;\
	height2 = w.bounds.height/10;\
	\
	Pen.strokeColor = Color.white;\
	\
	// --- Draw non-pad buttons --- //\
	\
	19.do(\{\
	\
		|i|\
		\
		var iter = i+16;\
		\
		if(~padKONTROL.().buttonStates[iter]==nil,\{Pen.fillColor = Color.black;\});\
		if(~padKONTROL.().buttonStates[iter]==\\held,\{Pen.fillColor = Color.green;\});\
		if(~padKONTROL.().buttonStates[iter]==\\released,\{Pen.fillColor = Color.red;\});\
		if(~padKONTROL.().buttonStates[iter]==\\pressed,\{Pen.fillColor = Color.blue;\});\
		\
		Pen.fillRect(Rect(i*width/19,0,width/19,height2));\
		Pen.strokeRect(Rect(i*width/19,0,width/19,height2));\
		\
	\});\
	\
	// --- Draw pads --- //\
	\
	16.do(\{\
	\
		|iter|\
		\
		var x, y;\
		\
		x = iter%4;\
		\
		y = (iter/4).asInteger;\
		\
		if(~padKONTROL.().buttonState(iter)==nil,\{Pen.fillColor = Color.black;\});\
		if(~padKONTROL.().buttonState(iter)==\\held,\{Pen.fillColor = Color.green;\});\
		if(~padKONTROL.().buttonState(iter)==\\released,\{Pen.fillColor = Color.red;\});\
		if(~padKONTROL.().buttonState(iter)==\\pressed,\{Pen.fillColor = Color.blue;\});\
		\
		Pen.fillRect(Rect(x*width/4,y*height/4+height2,width/4,height/4));\
		Pen.strokeRect(Rect(x*width/4,y*height/4+height2,width/4,height/4));\
		\
	\});\
	\
	// --- Set PadKONTROL light states to reflect button status --- //\
	\
	~padKONTROL.().buttonStates.do(\{\
	\
		|val, i|\
		\
		if(val!=nil,\{~padKONTROL.().lightStates[i]=1;\},\{~padKONTROL.().lightStates[i]=0;\});\
		\
	\});\
	\
	// --- Send light states and tick buttons so that pressed/held/released values are relevant --- //\
	\
	~padKONTROL.().setLights();\
	\
	~padKONTROL.().decayButtonStates();\
	\
\};\
\
AppClock.sched(0.0,\{w.refresh;1/5;\});\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf2 \
)\
*/}